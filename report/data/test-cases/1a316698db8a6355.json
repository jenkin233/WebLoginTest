{
  "uid" : "1a316698db8a6355",
  "name" : "test_cookie_httponly",
  "fullName" : "test_Web.TestLogin#test_cookie_httponly",
  "historyId" : "cf8a1d3a3c28947fc985806ef5389007",
  "time" : {
    "start" : 1546065198432,
    "stop" : 1546065204685,
    "duration" : 6253
  },
  "description" : "登陆后的cookie",
  "descriptionHtml" : "<p>登陆后的cookie</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert False == True",
  "statusTrace" : "self = <test_Web.TestLogin object at 0x00000224A96EECF8>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0331f2c14ecc3985e73ddcf3a512a68d\")>\n\n    @allure.story('安全性测试')\n    def test_cookie_httponly(self,get_driver):\n    \t'''登陆后的cookie'''\n    \tprint (\"测试登陆后的cookie...\")\n    \twith allure.step('初始化浏览器driver'):\n    \t\tlogin_page = LoginPage(get_driver)\n    \twith allure.step('正确登录'):\n    \t\tlogin_page.login(self.user,self.correct_pwd,False)\n    \twith allure.step('获取cookie'):\n    \t\tcookies = login_page.driver.get_cookies()\n    \twith allure.step('检测cookie是否httponly'):\n    \t\tnew_cookies = [cookie for cookie in cookies if cookie['value']==\"2073561622@qq.com\"]\n    \t\tfor cookie in new_cookies:\n>   \t\t\tassert cookie['httpOnly'] == True\nE      assert False == True\n\ntest_Web.py:275: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "get_driver",
    "time" : {
      "start" : 1546065196348,
      "stop" : 1546065198432,
      "duration" : 2084
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "登陆后的cookie",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert False == True",
    "statusTrace" : "self = <test_Web.TestLogin object at 0x00000224A96EECF8>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"0331f2c14ecc3985e73ddcf3a512a68d\")>\n\n    @allure.story('安全性测试')\n    def test_cookie_httponly(self,get_driver):\n    \t'''登陆后的cookie'''\n    \tprint (\"测试登陆后的cookie...\")\n    \twith allure.step('初始化浏览器driver'):\n    \t\tlogin_page = LoginPage(get_driver)\n    \twith allure.step('正确登录'):\n    \t\tlogin_page.login(self.user,self.correct_pwd,False)\n    \twith allure.step('获取cookie'):\n    \t\tcookies = login_page.driver.get_cookies()\n    \twith allure.step('检测cookie是否httponly'):\n    \t\tnew_cookies = [cookie for cookie in cookies if cookie['value']==\"2073561622@qq.com\"]\n    \t\tfor cookie in new_cookies:\n>   \t\t\tassert cookie['httpOnly'] == True\nE      assert False == True\n\ntest_Web.py:275: AssertionError",
    "steps" : [ {
      "name" : "初始化浏览器driver",
      "time" : {
        "start" : 1546065198432,
        "stop" : 1546065198432,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "正确登录",
      "time" : {
        "start" : 1546065198432,
        "stop" : 1546065204675,
        "duration" : 6243
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "获取cookie",
      "time" : {
        "start" : 1546065204675,
        "stop" : 1546065204684,
        "duration" : 9
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "检测cookie是否httponly",
      "time" : {
        "start" : 1546065204684,
        "stop" : 1546065204685,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: assert False == True\n",
      "statusTrace" : "  File \"C:\\Users\\lzsun\\Desktop\\work\\test_Web.py\", line 275, in test_cookie_httponly\n    assert cookie['httpOnly'] == True\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "abc5782726d9519c",
      "name" : "log",
      "source" : "abc5782726d9519c.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "d7013b3a59bcef2b",
      "name" : "stdout",
      "source" : "d7013b3a59bcef2b.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "ae899d052269a3b5",
      "name" : "stderr",
      "source" : "ae899d052269a3b5.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3,
    "stepsCount" : 4,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "get_driver::fin",
    "time" : {
      "start" : 1546065204699,
      "stop" : 1546065206920,
      "duration" : 2221
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "安全性测试"
  }, {
    "name" : "feature",
    "value" : "登录模块测试"
  }, {
    "name" : "suite",
    "value" : "test_Web"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-PHP6BA5"
  }, {
    "name" : "thread",
    "value" : "4088-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_Web"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "1a316698db8a6355.json",
  "parameterValues" : [ ]
}